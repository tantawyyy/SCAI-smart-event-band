#include <U8glib.h>
#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>

#define CE_PIN 7
#define CSN_PIN 8

#define R 3
#define G 10
#define B 6
#define VIB 9

U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE);
const unsigned char bitmap1[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0x00, 0x03, 0x00, 0xe0, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0xc0, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0x80, 0x07, 0x00, 0xc0, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 
  0x00, 0x06, 0x03, 0xc0, 0x01, 0x00, 0xc0, 0x00, 0x30, 0x00, 0x00, 0x80, 0xff, 0x7f, 0x00, 0x00, 
  0x00, 0x06, 0x03, 0x60, 0x00, 0x00, 0xc0, 0x00, 0x30, 0x00, 0x00, 0x00, 0x0f, 0x38, 0x00, 0x00, 
  0x00, 0x06, 0x3f, 0x18, 0x00, 0x00, 0xc0, 0x00, 0xf0, 0x07, 0x00, 0x00, 0x07, 0x38, 0x00, 0x00, 
  0x00, 0xf6, 0x3f, 0x07, 0x00, 0x00, 0xc7, 0x00, 0xf8, 0x03, 0x00, 0x00, 0x07, 0x18, 0x00, 0x00, 
  0x80, 0x7f, 0x02, 0x07, 0x00, 0x00, 0xc7, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x06, 0x18, 0x00, 0x00, 
  0xc0, 0x07, 0x02, 0x06, 0x00, 0x00, 0xc7, 0x00, 0x33, 0x00, 0x00, 0x00, 0x06, 0x18, 0x00, 0x00, 
  0x00, 0x04, 0x02, 0x06, 0x00, 0x00, 0xc3, 0x00, 0x30, 0x00, 0x00, 0x00, 0x06, 0x18, 0x00, 0x00, 
  0x00, 0x04, 0x02, 0x06, 0x10, 0x00, 0xc3, 0x0f, 0x30, 0xf8, 0x01, 0x00, 0x06, 0x18, 0x00, 0x00, 
  0x00, 0x7c, 0x02, 0x86, 0x7f, 0x80, 0xff, 0x03, 0xf0, 0xff, 0x03, 0x00, 0x06, 0x18, 0x00, 0x00, 
  0x00, 0x0c, 0x02, 0xfe, 0x1f, 0x80, 0x4f, 0x00, 0xfe, 0x03, 0x00, 0x00, 0x06, 0x18, 0x00, 0x00, 
  0x00, 0x04, 0x02, 0x86, 0x00, 0xc0, 0x40, 0xe0, 0xef, 0x00, 0x00, 0x00, 0x06, 0x1c, 0x00, 0x00, 
  0x00, 0x04, 0x02, 0x86, 0x01, 0xc0, 0x40, 0xf8, 0xc0, 0x00, 0x00, 0x00, 0x7e, 0x0c, 0x00, 0x00, 
  0x00, 0x7c, 0x02, 0x86, 0x03, 0x60, 0x40, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xf7, 0x0c, 0x00, 0x00, 
  0x00, 0x0c, 0x02, 0x86, 0x03, 0x20, 0x40, 0x02, 0xc0, 0x3c, 0x00, 0x00, 0xe3, 0x0c, 0x00, 0x00, 
  0x00, 0x04, 0x02, 0x86, 0x03, 0x00, 0xc0, 0x01, 0xc0, 0x7f, 0x00, 0x00, 0x03, 0x0c, 0x00, 0x00, 
  0x00, 0x04, 0x02, 0x83, 0x03, 0x00, 0xe0, 0x00, 0xfc, 0x07, 0x00, 0x00, 0x03, 0x0c, 0x00, 0x00, 
  0x00, 0x84, 0x3f, 0x83, 0x03, 0x00, 0x70, 0xf0, 0x8f, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x00, 0x00, 
  0x00, 0xfc, 0x03, 0x83, 0x01, 0x00, 0x7c, 0xf0, 0x80, 0x00, 0x00, 0x80, 0x03, 0x0c, 0x00, 0x00, 
  0xe0, 0x0f, 0x00, 0x83, 0x01, 0x00, 0x4f, 0x80, 0x80, 0x00, 0x00, 0x80, 0x01, 0x0c, 0x00, 0x04, 
  0xfe, 0x00, 0x80, 0x81, 0x01, 0xc0, 0x47, 0x80, 0x81, 0x01, 0x00, 0x80, 0x01, 0x0c, 0x00, 0x04, 
  0x0c, 0x86, 0x81, 0x81, 0x01, 0xf0, 0x41, 0x80, 0x83, 0x01, 0x00, 0xc0, 0x01, 0x0c, 0x00, 0x04, 
  0x00, 0x06, 0x83, 0x80, 0x01, 0xe0, 0x40, 0x00, 0x83, 0x01, 0x00, 0xc0, 0x00, 0x0c, 0x00, 0x04, 
  0x00, 0x07, 0xc7, 0x80, 0x01, 0x00, 0x60, 0x00, 0x83, 0x01, 0x00, 0xe0, 0x00, 0x1c, 0x00, 0x06, 
  0x80, 0x03, 0x66, 0x80, 0x01, 0x00, 0x60, 0x00, 0x80, 0x01, 0x00, 0x60, 0x00, 0x1c, 0x00, 0x06, 
  0x80, 0x01, 0x26, 0x80, 0x01, 0x00, 0x60, 0x00, 0x80, 0x01, 0x00, 0x30, 0x00, 0x38, 0x00, 0x0e, 
  0xc0, 0x00, 0x14, 0x80, 0x01, 0x00, 0x60, 0x00, 0x80, 0x01, 0x00, 0x18, 0x00, 0xf8, 0x00, 0x0f, 
  0x60, 0x00, 0x00, 0x80, 0x01, 0x00, 0x60, 0x00, 0x80, 0x01, 0x00, 0x0c, 0x00, 0xf0, 0xff, 0x0f, 
  0x30, 0x00, 0x00, 0x80, 0x01, 0x00, 0x60, 0x00, 0xc0, 0x01, 0x00, 0x06, 0x00, 0xe0, 0xff, 0x0f, 
  0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x60, 0x00, 0xfc, 0x01, 0x00, 0x03, 0x00, 0x00, 0xff, 0x01, 
  0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x60, 0x00, 0xf0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x60, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Dummy bitmaps for example (replace with actual data) english
const unsigned char bitmap2[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xc0, 0xc1, 0xe0, 0xf8, 0x7f, 0x1e, 0x00, 0xfc, 0x03, 0xf8, 0x03, 0x1e, 0x80, 0xc7, 0xff, 0x07, 
  0xc0, 0xc1, 0xe0, 0xf8, 0x7f, 0x1e, 0x00, 0xff, 0x0f, 0xfe, 0x0f, 0x3e, 0xc0, 0xc7, 0xff, 0x07, 
  0xe0, 0xc3, 0xe0, 0xf8, 0x00, 0x1e, 0x00, 0x0f, 0x0f, 0x0f, 0x3e, 0x3e, 0xe0, 0xc7, 0x03, 0x00, 
  0xe0, 0xc3, 0xe0, 0x78, 0x00, 0x1e, 0x00, 0x0f, 0x8f, 0x07, 0x3c, 0xfe, 0xf0, 0xc7, 0x03, 0x00, 
  0x80, 0xe3, 0x63, 0x78, 0x00, 0x1e, 0x00, 0x0f, 0x80, 0x07, 0x3c, 0xfe, 0xf0, 0xc7, 0x03, 0x00, 
  0x80, 0xe7, 0x73, 0xf8, 0x1f, 0x1e, 0x00, 0x0f, 0x80, 0x07, 0x3c, 0xde, 0xf9, 0xc7, 0xff, 0x01, 
  0x80, 0xe7, 0x73, 0xf8, 0x1f, 0x1e, 0x00, 0x0f, 0x80, 0x07, 0x3c, 0x9e, 0x9f, 0xc7, 0xff, 0x01, 
  0x00, 0x37, 0x3f, 0xf8, 0x00, 0x1e, 0x00, 0x0f, 0x80, 0x07, 0x3c, 0x1e, 0x8f, 0xc7, 0x03, 0x00, 
  0x00, 0x3f, 0x3f, 0x78, 0x00, 0x1e, 0x00, 0x0f, 0x80, 0x07, 0x3c, 0x1e, 0x8f, 0xc7, 0x03, 0x00, 
  0x00, 0x3f, 0x3f, 0x78, 0x00, 0x1e, 0x00, 0x0f, 0x0f, 0x07, 0x3c, 0x1e, 0x86, 0xc7, 0x03, 0x00, 
  0x00, 0x1e, 0x1e, 0xf8, 0x3f, 0xfe, 0x1f, 0x9f, 0x0f, 0x1e, 0x1f, 0x1e, 0x80, 0xc7, 0xff, 0x07, 
  0x00, 0x1e, 0x1c, 0xf8, 0x7f, 0xfe, 0x1f, 0xfe, 0x07, 0xfc, 0x07, 0x1e, 0x80, 0xc7, 0xff, 0x07, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xf0, 0xff, 0xf1, 0x1f, 0x80, 0xff, 0xcf, 0xc3, 0xe3, 0x7f, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xf0, 0xff, 0xf9, 0x7f, 0x80, 0xff, 0xcf, 0xc3, 0xe3, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x38, 0x78, 0x00, 0x70, 0xc0, 0xc3, 0xe3, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x38, 0x78, 0x00, 0x70, 0xc0, 0xc3, 0xe3, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x38, 0x78, 0x00, 0x70, 0xc0, 0xff, 0xe3, 0x3f, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x38, 0x78, 0x00, 0x70, 0xc0, 0xff, 0xe3, 0x3f, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x38, 0x78, 0x00, 0x70, 0xc0, 0xc3, 0xe3, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x38, 0x78, 0x00, 0x70, 0xc0, 0xc3, 0xe3, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0e, 0xf8, 0x7f, 0x00, 0x70, 0xc0, 0xc3, 0xe3, 0x7f, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0e, 0xe0, 0x1f, 0x00, 0x70, 0xc0, 0xc3, 0xe3, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xf0, 0x60, 0xf8, 0xf8, 0x1f, 0xfe, 0x0f, 0x1f, 0xc0, 0xff, 0x01, 0xff, 0xf0, 0xe0, 0xf8, 0x0f, 
  0xf0, 0x60, 0x78, 0x7c, 0x7c, 0x1e, 0x1e, 0x1f, 0xe0, 0xe3, 0xe3, 0xe7, 0xf3, 0xe0, 0x39, 0x1c, 
  0xe0, 0x60, 0x78, 0x1c, 0x78, 0x1e, 0x1c, 0x1f, 0xc0, 0xc3, 0xe3, 0xc1, 0xf3, 0xe0, 0x39, 0x18, 
  0xe0, 0xf8, 0x38, 0x1c, 0x78, 0x1e, 0x1c, 0x1f, 0xe0, 0xc3, 0xe3, 0x81, 0xf1, 0xe0, 0x39, 0x18, 
  0xe0, 0xf8, 0x38, 0x1c, 0x78, 0x1e, 0x1e, 0x1f, 0xc0, 0xc3, 0xe3, 0x01, 0xf0, 0xe0, 0x39, 0x18, 
  0xe0, 0xfc, 0x39, 0x1c, 0x78, 0xfe, 0x0f, 0x1f, 0xc0, 0xc3, 0xe3, 0x01, 0xf0, 0xe0, 0xf8, 0x1f, 
  0xc0, 0xdd, 0x3f, 0x1c, 0x78, 0xde, 0x03, 0x1f, 0xc0, 0xc3, 0xe3, 0x01, 0xf0, 0xe0, 0xf9, 0x07, 
  0xc0, 0x8f, 0x1f, 0x1c, 0x78, 0x9e, 0x07, 0x1f, 0xc0, 0xc3, 0xe3, 0x01, 0xf0, 0xe0, 0x39, 0x00, 
  0xc0, 0x8f, 0x1f, 0x1c, 0x78, 0x1e, 0x0f, 0x1f, 0xc0, 0xc3, 0xe3, 0xc1, 0xf3, 0xe0, 0x38, 0x00, 
  0x80, 0x07, 0x0f, 0x3c, 0x3c, 0x1e, 0x1e, 0xff, 0xc7, 0xff, 0xe3, 0xe7, 0xf3, 0xf1, 0x38, 0x00, 
  0x80, 0x07, 0x0f, 0xf0, 0x1f, 0x1e, 0x3c, 0xff, 0xc7, 0xff, 0x80, 0xff, 0xc0, 0x3f, 0x38, 0x00, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char bitmap3[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0x06, 0x80, 0x01, 0xe0, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xf0, 0x07, 0x00, 0x00, 0x0e, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x0e, 0x80, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x1e, 0x80, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x1c, 0xc0, 0x01, 0xc0, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x20, 0x00, 0x38, 0x80, 0x01, 0xc0, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x70, 0xf0, 0x01, 0x30, 0x00, 0x30, 0xc0, 0x01, 0xc1, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xf0, 0xe0, 0x03, 0x70, 0x00, 0x60, 0xc0, 0x81, 0xc7, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xf8, 0x80, 0x07, 0x70, 0x00, 0x40, 0xc0, 0xe1, 0xcf, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xcc, 0x01, 0x06, 0x60, 0x00, 0xc0, 0xe0, 0xe1, 0x8f, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xc4, 0x01, 0x0e, 0x60, 0x00, 0x80, 0xa0, 0x21, 0x8e, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x8f, 0x03, 0x3e, 0x70, 0x00, 0x80, 0xb0, 0x31, 0x9c, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x80, 0xbf, 0x7f, 0x9c, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0xff, 0xff, 0xfb, 0x3f, 0x00, 0xc0, 0x9f, 0xff, 0x9f, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0xf1, 0xfe, 0xf1, 0x1f, 0x00, 0xe0, 0x0f, 0xff, 0x8f, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x07, 0xcf, 0x8f, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x30, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0x01, 0x00, 0x80, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x8e, 0x01, 0x30, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x30, 0x00, 0x60, 0x18, 0x00, 0x00, 0x00, 0xee, 0x00, 0x30, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x30, 0x03, 0xe0, 0x18, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x30, 0x03, 0xe0, 0x18, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x60, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x30, 0x03, 0x40, 0x18, 0x00, 0x00, 0x00, 0x1c, 0x00, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x30, 0x03, 0x40, 0x18, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x30, 0x03, 0x40, 0x18, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x98, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0xe0, 0x31, 0xc3, 0x47, 0x18, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x98, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0xe0, 0x33, 0xe3, 0xcf, 0x18, 0x00, 0x00, 0x40, 0x78, 0x00, 0xf8, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0xf0, 0x33, 0xe3, 0xcf, 0x18, 0x00, 0x00, 0xe0, 0xf0, 0x00, 0xf8, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x90, 0x37, 0xe3, 0xce, 0x18, 0x00, 0x80, 0xcc, 0xc0, 0x00, 0x70, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0xf8, 0x37, 0xc7, 0xcf, 0x18, 0x00, 0xc0, 0xcc, 0xc0, 0x40, 0x80, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0xf8, 0xf3, 0xff, 0xff, 0x18, 0x60, 0xc0, 0xef, 0xc0, 0x60, 0xf8, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x0c, 0xf3, 0xff, 0x7f, 0x18, 0x60, 0xc0, 0xff, 0xff, 0x20, 0xf8, 0x03, 0x00, 0x00, 
  0x00, 0x00, 0x0c, 0xe0, 0xff, 0x7f, 0x18, 0x20, 0xc0, 0xff, 0x7f, 0x20, 0xf0, 0x03, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0xc0, 0x7c, 0x1c, 0x00, 0x60, 0xc0, 0x30, 0x1f, 0x20, 0x80, 0x03, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc0, 0x00, 0x00, 0x60, 0xc0, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x70, 0x00, 0x00, 0xe0, 0xf9, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0x00, 0x00, 0xe0, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0xc0, 0x3f, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x80, 0x0f, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void drawBitmap(const uint8_t *bitmap) {
  u8g.drawXBMP(0, 0, 128, 64, bitmap);
}








void u8g_prepare(void) {
  u8g.setFont(u8g_font_6x10);
  u8g.setFontRefHeightExtendedText();
  u8g.setDefaultForegroundColor();
  u8g.setFontPosTop();
}

void u8g_box_frame(uint8_t a) {
  u8g.drawStr( 0, 0, "drawBox");
  u8g.drawBox(5,10,20,10);
  u8g.drawBox(10+a,15,30,7);
  u8g.drawStr( 0, 30, "drawFrame");
  u8g.drawFrame(5,10+30,20,10);
  u8g.drawFrame(10+a,15+30,30,7);
}

void u8g_disc_circle(uint8_t a) {
  u8g.drawStr( 0, 0, "drawDisc");
  u8g.drawDisc(10,18,9);
  u8g.drawDisc(24+a,16,7);
  u8g.drawStr( 0, 30, "drawCircle");
  u8g.drawCircle(10,18+30,9);
  u8g.drawCircle(24+a,16+30,7);
}

void u8g_r_frame(uint8_t a) {
  u8g.drawStr( 0, 0, "drawRFrame/Box");
  u8g.drawRFrame(5, 10,40,30, a+1);
  u8g.drawRBox(50, 10,25,40, a+1);
}

void u8g_string(uint8_t a) {
  u8g.drawStr(30+a,31, " 0");
  u8g.drawStr90(30,31+a, " 90");
  u8g.drawStr180(30-a,31, " 180");
  u8g.drawStr270(30,31-a, " 270");
}

void u8g_line(uint8_t a) {
  u8g.drawStr( 0, 0, "drawLine");
  u8g.drawLine(7+a, 10, 40, 55);
  u8g.drawLine(7+a*2, 10, 60, 55);
  u8g.drawLine(7+a*3, 10, 80, 55);
  u8g.drawLine(7+a*4, 10, 100, 55);
}

void u8g_triangle(uint8_t a) {
  uint16_t offset = a;
  u8g.drawStr( 0, 0, "drawTriangle");
  u8g.drawTriangle(14,7, 45,30, 10,40);
  u8g.drawTriangle(14+offset,7-offset, 45+offset,30-offset, 57+offset,10-offset);
  u8g.drawTriangle(57+offset*2,10, 45+offset*2,30, 86+offset*2,53);
  u8g.drawTriangle(10+offset,40+offset, 45+offset,30+offset, 86+offset,53+offset);
}

void u8g_ascii_1() {
  char s[2] = " ";
  uint8_t x, y;
  u8g.drawStr( 0, 0, "ASCII page 1");
  for( y = 0; y < 6; y++ ) {
    for( x = 0; x < 16; x++ ) {
      s[0] = y*16 + x + 32;
      u8g.drawStr(x*7, y*10+10, s);
    }
  }
}

void u8g_ascii_2() {
  char s[2] = " ";
  uint8_t x, y;
  u8g.drawStr( 0, 0, "ASCII page 2");
  for( y = 0; y < 6; y++ ) {
    for( x = 0; x < 16; x++ ) {
      s[0] = y*16 + x + 160;
      u8g.drawStr(x*7, y*10+10, s);
    }
  }
}

void u8g_extra_page(uint8_t a)
{
  if ( u8g.getMode() == U8G_MODE_HICOLOR || u8g.getMode() == U8G_MODE_R3G3B2) {
    /* draw background (area is 128x128) */
    u8g_uint_t r, g, b;
    b = a << 5;
    for( g = 0; g < 64; g++ )
    {
      for( r = 0; r < 64; r++ )
      {
  u8g.setRGB(r<<2, g<<2, b );
  u8g.drawPixel(g, r);
      }
    }
    u8g.setRGB(255,255,255);
    u8g.drawStr( 66, 0, "Color Page");
  }
  else if ( u8g.getMode() == U8G_MODE_GRAY2BIT )
  {
    u8g.drawStr( 66, 0, "Gray Level");
    u8g.setColorIndex(1);
    u8g.drawBox(0, 4, 64, 32);    
    u8g.drawBox(70, 20, 4, 12);
    u8g.setColorIndex(2);
    u8g.drawBox(0+1*a, 4+1*a, 64-2*a, 32-2*a);
    u8g.drawBox(74, 20, 4, 12);
    u8g.setColorIndex(3);
    u8g.drawBox(0+2*a, 4+2*a, 64-4*a, 32-4*a);
    u8g.drawBox(78, 20, 4, 12);
  }
  else
  {
    u8g.drawStr( 0, 12, "setScale2x2");
    u8g.setScale2x2();
    u8g.drawStr( 0, 6+a, "setScale2x2");
    u8g.undoScale();
  }
}


uint8_t draw_state = 0;

void draw(void) {
  u8g_prepare();
  switch(draw_state >> 3) {
    case 0: u8g_box_frame(draw_state&7); break;
    case 1: u8g_disc_circle(draw_state&7); break;
    case 2: u8g_r_frame(draw_state&7); break;
    case 3: u8g_string(draw_state&7); break;
    case 4: u8g_line(draw_state&7); break;
    case 5: u8g_triangle(draw_state&7); break;
    case 6: u8g_ascii_1(); break;
    case 7: u8g_ascii_2(); break;
    case 8: u8g_extra_page(draw_state&7); break;
  }
}




RF24 radio(CE_PIN, CSN_PIN);
const byte address[6] = "00001";  // Must match the transmitter

void setup() {
    Serial.begin(9600);
    radio.begin();
    radio.openReadingPipe(0, address);
    radio.setPALevel(RF24_PA_LOW);
    radio.startListening(); // Set as Receiver

    pinMode(R, OUTPUT);
    pinMode(G, OUTPUT);
    pinMode(B, OUTPUT);
    pinMode(VIB, OUTPUT);
}

void loop() {
    if (radio.available()) {
        int receivedNumber = 0;
        radio.read(&receivedNumber, sizeof(receivedNumber)); // Read the integer
        Serial.print("Received: ");
        Serial.println(receivedNumber);

        // Turn off all Gs first
        digitalWrite(R, LOW);
        digitalWrite(G, LOW);
        digitalWrite(B, LOW);
        digitalWrite(VIB, LOW);

        // Light up the corresponding G
        if (receivedNumber == 1) {
            digitalWrite(R, HIGH);
        } else if (receivedNumber == 2) {
            digitalWrite(G, HIGH);
        } else if (receivedNumber == 3) {
            digitalWrite(B, HIGH);
        } 
        else if (receivedNumber == 4) {
           digitalWrite(G, HIGH);
            digitalWrite(B, HIGH);
        }
        else if (receivedNumber == 5) {
            digitalWrite(VIB, HIGH);
        }
        else if (receivedNumber == 6) {
             u8g.firstPage();
  do {
    u8g.setColorIndex(1);
    drawBitmap(bitmap2);
  } while (u8g.nextPage());
        }
        else if (receivedNumber == 7) {
                     u8g.firstPage();
  do {
     u8g.setColorIndex(0); // Set color to black
    u8g.drawBox(0, 0, 128, 64); // Clear screen
    drawBitmap(bitmap2);
  } while (u8g.nextPage());
         
        }
        else if (receivedNumber == 8) {
             // picture loop  
  u8g.firstPage();  
  do {
    draw();
  } while( u8g.nextPage() );
  
  // increase the state
  draw_state++;
  if ( draw_state >= 9*8 )
    draw_state = 0;
  
  // rebuild the picture after some delay
  //delay(150);
        }else if (receivedNumber == 9) {
            

 digitalWrite(VIB, HIGH); 
delay(200);
digitalWrite(VIB, 0);
 delay(150);
  
  digitalWrite(R, HIGH); 
  delay(40);
  digitalWrite(R, 0); 
delay(300);

digitalWrite(G, HIGH); 
  delay(40);
  digitalWrite(G, 0); 
delay(300);

digitalWrite(VIB, HIGH); 
delay(200);
digitalWrite(VIB, 0);
 delay(300);
 
digitalWrite(B, HIGH); 
  delay(40);
  digitalWrite(B, 0); 
delay(300);

        }
else if (receivedNumber == 10) {
  for(int i=0;i<255;i++){
  
  
  analogWrite(G, i);
  delay(5);
  
  
  }
  for(int i=255;i>0;i--){
  
  
  analogWrite(G, i);
  delay(5);
  
  
  }

}

        
    }
}
